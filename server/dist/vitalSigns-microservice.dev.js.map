{"version":3,"sources":["vitalSigns-microservice.js"],"names":["express","require","ApolloServer","gql","jwt","cors","cookieParser","bodyParser","userSchema","config","mongoose","Schema","model","connect","process","env","MONGODB_URI","then","console","log","err","error","db","connection","on","bind","User","app","use","origin","credentials","vitalSignSchema","userId","type","Types","ObjectId","required","ref","heartRate","Number","bloodPressure","String","temperature","createdAt","Date","now","vitalSign","typeDefs","json","getVitalSignsByUsername","username","aggregate","$lookup","from","localField","foreignField","as","$match","$regex","$options","$addFields","id","$project","_id","vitalSigns","Error","message","getUserIdByUsername","findOne","user","resolvers","Query","getVitalSigns","_","find","Mutation","addVitalSign","newVitalSign","save","updateVitalSign","findByIdAndUpdate","updatedVitalSign","server","context","req","token","cookies","verify","JWT_SECRET","e","start","applyMiddleware","listen","port","graphqlPath"],"mappings":"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","sourcesContent":["// server/product-microservice.js\r\nconst express = require('express');\r\nconst { ApolloServer, gql } = require('apollo-server-express');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors');\r\nconst cookieParser = require('cookie-parser');\r\nconst bodyParser = require('body-parser');\r\nconst userSchema = require('./userSchema');\r\nrequire('dotenv').config();\r\n//\r\nconst mongoose = require('mongoose');\r\nconst { Schema, model } = mongoose;\r\n\r\n// MongoDB connection setup\r\nmongoose.connect(process.env.MONGODB_URI)\r\n    .then(() => console.log(\"MongoDB connected\"))\r\n    .catch(err => console.error(\"MongoDB connection error:\", err));\r\n\r\nconst db = mongoose.connection;\r\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\r\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\r\n//user model\r\nconst User = model('User', userSchema);\r\n\r\n// Initialize express and configure middleware\r\nconst app = express();\r\napp.use(cors({\r\n    origin: ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:3002', 'http://localhost:3003', 'https://studio.apollographql.com'],\r\n    credentials: true,\r\n\r\n}));\r\napp.use(cookieParser());\r\n\r\n\r\n\r\n// Vital signs schema definition\r\nconst vitalSignSchema = new Schema({\r\n    userId: { type: mongoose.Schema.Types.ObjectId, required: true, ref: 'User' },\r\n    heartRate: Number,\r\n    bloodPressure: String,\r\n    temperature: Number,\r\n    createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\nconst vitalSign = model('VitalSign', vitalSignSchema);\r\n\r\n// GraphQL schema\r\nconst typeDefs = gql `\r\n    type VitalSign {\r\n        id: ID\r\n        userId: ID\r\n        heartRate: Int\r\n        bloodPressure: Int\r\n        temperature: Float\r\n        createdAt: String\r\n    }\r\n\r\n    type Query {\r\n        getVitalSigns(userId:ID, username: String): [VitalSign]\r\n    }\r\n\r\n    type Mutation {\r\n        addVitalSign(username: String!, heartRate: Int!, bloodPressure: Int!, temperature: Float!): VitalSign\r\n        updateVitalSign(id: ID!, heartRate: Int, bloodPressure: Int, temperature: Float): VitalSign\r\n    }\r\n`;\r\n\r\n// Middleware\r\napp.use(bodyParser.json());\r\n\r\n\r\n//Get vital signs by username function\r\nconst getVitalSignsByUsername = async(username) => {\r\n    try {\r\n        const vitalSigns = await vitalSign.aggregate([{\r\n                $lookup: {\r\n                    from: 'users',\r\n                    localField: 'userId',\r\n                    foreignField: '_id',\r\n                    as: 'user'\r\n                }\r\n            },\r\n            {\r\n                $match: {\r\n                    'user.username': { $regex: username, $options: 'i' }\r\n                }\r\n            },\r\n            {\r\n                $addFields: {\r\n                    id: '$_id'\r\n                }\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: 0,\r\n                    id: 1,\r\n                    userId: 1,\r\n                    heartRate: 1,\r\n                    bloodPressure: 1,\r\n                    temperature: 1,\r\n                    createdAt: 1\r\n                }\r\n            }\r\n        ]);\r\n        return vitalSigns;\r\n    } catch (error) {\r\n        throw new Error(\"Error fetching vital signs for this username: \" + error.message);\r\n    }\r\n}\r\n\r\n//Get userId by username\r\nconst getUserIdByUsername = async(username) => {\r\n    const user = await User.findOne({ username });\r\n    return user._id;\r\n};\r\n\r\n// GraphQL resolvers\r\nconst resolvers = {\r\n    Query: {\r\n        getVitalSigns: async(_, { userId, username }) => {\r\n            if (userId) {\r\n                try {\r\n                    const vitalSigns = await vitalSign.find({ userId: userId });\r\n                    return vitalSigns;\r\n                } catch (error) {\r\n                    throw new Error(\"Error fetching vital signs: \" + error.message);\r\n                }\r\n            } else if (username) {\r\n                return getVitalSignsByUsername(username);\r\n            } else {\r\n                throw new Error(\"Invalid username or userId\");\r\n            }\r\n        }\r\n    },\r\n    Mutation: {\r\n        addVitalSign: async(_, { username, heartRate, bloodPressure, temperature }) => {\r\n            const userId = await getUserIdByUsername(username);\r\n            console.log(userId);\r\n            try {\r\n                const newVitalSign = new vitalSign({ userId, heartRate, bloodPressure, temperature });\r\n                return await newVitalSign.save();\r\n            } catch (error) {\r\n                throw new Error(\"Error adding vital sign: \" + error.message);\r\n            }\r\n        },\r\n\r\n        updateVitalSign: async(_, { id, heartRate, bloodPressure, temperature }) => {\r\n            try {\r\n\r\n                const updatedVitalSign = await vitalSign.findByIdAndUpdate(\r\n                    id, { heartRate, bloodPressure, temperature }, { new: true }\r\n                );\r\n                if (!updatedVitalSign) throw new Error(\"Vital sign not found\");\r\n                return updatedVitalSign;\r\n            } catch (error) {\r\n                throw new Error(\"Error updating vital sign: \" + error.message);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n// Create and start Apollo Server\r\nconst server = new ApolloServer({\r\n    typeDefs,\r\n    resolvers,\r\n    context: ({ req }) => {\r\n        const token = req.cookies['token'];\r\n        console.log(\"token in vital signs:\", token);\r\n        if (token) {\r\n            try {\r\n                const user = jwt.verify(token, process.env.JWT_SECRET); // Replace 'your_secret_key' with your actual secret key\r\n                return { user };\r\n            } catch (e) {\r\n                throw new Error('Your session expired. Sign in again.');\r\n            }\r\n        }\r\n    },\r\n});\r\n//\r\nserver.start().then(() => {\r\n    server.applyMiddleware({ app, cors: false });\r\n    app.listen({ port: 4002 }, () =>\r\n        console.log(`🚀 Vital Signs Server ready at http://localhost:4005${server.graphqlPath}`));\r\n});"],"file":"vitalSigns-microservice.dev.js"}
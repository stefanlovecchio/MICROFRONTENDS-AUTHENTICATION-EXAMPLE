{"version":3,"sources":["patientportalApp-microservice.js"],"names":["require","config","express","ApolloServer","gql","mongoose","connect","process","env","MONGODB_URI","then","console","log","err","error","emergencyAlertSchema","Schema","patientName","type","String","required","description","timestamp","Date","now","EmergencyAlert","model","typeDefs","resolvers","Query","emergencyAlerts","find","sort","Error","Mutation","addEmergencyAlert","_","newAlert","save","app","server","introspection","start","applyMiddleware","PORT","listen","graphqlPath"],"mappings":"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","sourcesContent":["require('dotenv').config();\r\nconst express = require('express');\r\nconst { ApolloServer, gql } = require('apollo-server-express');\r\nconst mongoose = require('mongoose');\r\n\r\n// MongoDB connection\r\nmongoose.connect(process.env.MONGODB_URI)\r\n    .then(() => console.log('MongoDB connected'))\r\n    .catch((err) => console.error('MongoDB connection error:', err));\r\n\r\n// Define Mongoose schema and model\r\nconst emergencyAlertSchema = new mongoose.Schema({\r\n    patientName: { type: String, required: true },\r\n    type: { type: String, required: true },\r\n    description: { type: String },\r\n    timestamp: { type: Date, default: Date.now },\r\n});\r\n\r\nconst EmergencyAlert = mongoose.model('EmergencyAlert', emergencyAlertSchema);\r\n\r\n// GraphQL schema\r\nconst typeDefs = gql `\r\n  type EmergencyAlert {\r\n    id: ID!\r\n    patientName: String!\r\n    type: String!\r\n    description: String\r\n    timestamp: String!\r\n  }\r\n\r\n  type Query {\r\n    emergencyAlerts: [EmergencyAlert]\r\n  }\r\n\r\n  type Mutation {\r\n    addEmergencyAlert(patientName: String!, type: String!, description: String): EmergencyAlert\r\n  }\r\n`;\r\n\r\n// GraphQL resolvers\r\nconst resolvers = {\r\n    Query: {\r\n        emergencyAlerts: async() => {\r\n            try {\r\n                return await EmergencyAlert.find().sort({ timestamp: -1 });\r\n            } catch (err) {\r\n                console.error('Error fetching emergency alerts:', err);\r\n                throw new Error('Could not fetch emergency alerts');\r\n            }\r\n        },\r\n    },\r\n    Mutation: {\r\n        addEmergencyAlert: async(_, { patientName, type, description }) => {\r\n            try {\r\n                const newAlert = new EmergencyAlert({ patientName, type, description });\r\n                await newAlert.save();\r\n                return newAlert;\r\n            } catch (err) {\r\n                console.error('Error adding emergency alert:', err);\r\n                throw new Error('Could not add emergency alert');\r\n            }\r\n        },\r\n    },\r\n};\r\n\r\n// Initialize Apollo Server\r\nconst app = express();\r\nconst server = new ApolloServer({\r\n    typeDefs,\r\n    resolvers,\r\n    introspection: true, // Enable GraphiQL for testing\r\n});\r\n\r\nserver.start().then(() => {\r\n    server.applyMiddleware({ app });\r\n\r\n    // Start Express server\r\n    const PORT = process.env.PORT || 4004;\r\n    app.listen(PORT, () => {\r\n        console.log(`ðŸš€ Emergency Alert Service running at http://localhost:${PORT}${server.graphqlPath}`);\r\n    });\r\n});"],"file":"patientportalApp-microservice.dev.js"}
"use strict";function ownKeys(t,e){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),o.push.apply(o,r)}return o}function _objectSpread(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?ownKeys(o,!0).forEach(function(e){_defineProperty(t,e,o[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):ownKeys(o).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))})}return t}function _defineProperty(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}var _require=require("child_process"),fork=_require.fork,_require2=require("child_process"),execSync=_require2.execSync,services=[{name:"Auth Service",path:"./auth-microservice.js",port:4001},{name:"Checklist Service",path:"./checklist-microservice.js",port:4002},{name:"Motivational Tips Service",path:"./motivationalTips-microservice.js",port:4003},{name:"Patient Portal Service",path:"./patientPortalApp-microservice.js",port:4004},{name:"Vital Signs Service",path:"./vitalSigns-microservice.js",port:4005}],runningServices=0,totalServices=services.length;console.log("Starting ".concat(totalServices," microservices...\n"));var killPortTasks=function(t){try{execSync("netstat -ano | findstr :".concat(t),{encoding:"utf-8"}).trim().split("\n").map(function(e){var t=e.trim().split(/\s+/);return t[t.length-1]}).forEach(function(e){console.log("Killing process with PID: ".concat(e," on port ").concat(t)),execSync("taskkill /PID ".concat(e," /F"))}),console.log("Port ".concat(t," has been freed."))}catch(e){console.log("No tasks found on port ".concat(t,"."))}},logStatus=function(){console.clear(),console.log("Microservices Running: ".concat(runningServices,"/").concat(totalServices,"\n")),services.forEach(function(e){var t=e.status||{};console.log("[".concat(e.name.padEnd(25),"] Port: ").concat(e.port," | MongoDB: ").concat(t.mongoDB||"❌"," | GraphQL: ").concat(t.graphQL||"❌"))}),console.log("\n----------------------------\n")};services.forEach(function(o){killPortTasks(o.port),o.status={mongoDB:"❌",graphQL:"❌"};var e=fork(o.path,[],{stdio:["inherit","pipe","pipe","ipc"],env:_objectSpread({},process.env,{PORT:o.port})});runningServices++,console.log("[".concat(o.name,"] Starting on port ").concat(o.port,"...")),logStatus(),e.stdout&&e.stdout.on("data",function(e){var t=e.toString().trim();console.log("[DEBUG] Output from ".concat(o.name,":"),t),t.includes("MongoDB connected")&&(o.status.mongoDB="✅"),t.includes("GraphQL server is running")&&(o.status.graphQL="✅"),logStatus()}),e.stderr&&e.stderr.on("data",function(e){console.error("[".concat(o.name," Error]: ").concat(e.toString().trim()))}),e.on("exit",function(e){runningServices--,o.status.mongoDB="❌",o.status.graphQL="❌",console.log("[".concat(o.name,"] Process exited with code ").concat(e)),logStatus()}),e.on("error",function(e){console.error("[".concat(o.name," Error]: Failed to start - ").concat(e.message)),runningServices--,logStatus()})});
//# sourceMappingURL=index.min.js.map

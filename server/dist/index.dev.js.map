{"version":3,"sources":["index.js"],"names":["require","fork","execSync","services","name","path","port","runningServices","totalServices","length","console","log","killPortTasks","result","encoding","lines","trim","split","pids","map","line","columns","forEach","pid","error","logStatus","clear","service","status","padEnd","mongoDB","graphQL","child","stdio","env","process","PORT","stdout","on","data","output","toString","includes","stderr","code","err","message"],"mappings":"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","sourcesContent":["const { fork } = require('child_process');\r\nconst { execSync } = require('child_process');\r\n\r\nconst services = [\r\n    { name: 'Auth Service', path: './auth-microservice.js', port: 4001 },\r\n    { name: 'Checklist Service', path: './checklist-microservice.js', port: 4002 },\r\n    { name: 'Motivational Tips Service', path: './motivationalTips-microservice.js', port: 4003 },\r\n    { name: 'Patient Portal Service', path: './patientPortalApp-microservice.js', port: 4004 },\r\n    { name: 'Vital Signs Service', path: './vitalSigns-microservice.js', port: 4005 },\r\n];\r\n\r\nlet runningServices = 0;\r\nconst totalServices = services.length;\r\n\r\nconsole.log(`Starting ${totalServices} microservices...\\n`);\r\n\r\nconst killPortTasks = (port) => {\r\n    try {\r\n        const result = execSync(`netstat -ano | findstr :${port}`, { encoding: 'utf-8' });\r\n        const lines = result.trim().split('\\n');\r\n        const pids = lines.map((line) => {\r\n            const columns = line.trim().split(/\\s+/);\r\n            return columns[columns.length - 1];\r\n        });\r\n\r\n        pids.forEach((pid) => {\r\n            console.log(`Killing process with PID: ${pid} on port ${port}`);\r\n            execSync(`taskkill /PID ${pid} /F`);\r\n        });\r\n\r\n        console.log(`Port ${port} has been freed.`);\r\n    } catch (error) {\r\n        console.log(`No tasks found on port ${port}.`);\r\n    }\r\n};\r\n\r\nconst logStatus = () => {\r\n    console.clear();\r\n    console.log(`Microservices Running: ${runningServices}/${totalServices}\\n`);\r\n    services.forEach((service) => {\r\n        const status = service.status || {};\r\n        console.log(\r\n            `[${service.name.padEnd(25)}] Port: ${service.port} | MongoDB: ${status.mongoDB || '❌'} | GraphQL: ${status.graphQL || '❌'}`\r\n        );\r\n    });\r\n    console.log('\\n----------------------------\\n');\r\n};\r\n\r\nservices.forEach((service) => {\r\n    killPortTasks(service.port);\r\n\r\n    service.status = { mongoDB: '❌', graphQL: '❌' };\r\n\r\n    const child = fork(service.path, [], {\r\n        stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\r\n        env: {...process.env, PORT: service.port },\r\n    });\r\n\r\n    runningServices++;\r\n    console.log(`[${service.name}] Starting on port ${service.port}...`);\r\n    logStatus();\r\n\r\n    if (child.stdout) {\r\n        child.stdout.on('data', (data) => {\r\n            const output = data.toString().trim();\r\n            console.log(`[DEBUG] Output from ${service.name}:`, output);\r\n\r\n            if (output.includes('MongoDB connected')) {\r\n                service.status.mongoDB = '✅';\r\n            }\r\n\r\n            if (output.includes('GraphQL server is running')) {\r\n                service.status.graphQL = '✅';\r\n            }\r\n\r\n            logStatus();\r\n        });\r\n    }\r\n\r\n    if (child.stderr) {\r\n        child.stderr.on('data', (data) => {\r\n            console.error(`[${service.name} Error]: ${data.toString().trim()}`);\r\n        });\r\n    }\r\n\r\n    child.on('exit', (code) => {\r\n        runningServices--;\r\n        service.status.mongoDB = '❌';\r\n        service.status.graphQL = '❌';\r\n        console.log(`[${service.name}] Process exited with code ${code}`);\r\n        logStatus();\r\n    });\r\n\r\n    child.on('error', (err) => {\r\n        console.error(`[${service.name} Error]: Failed to start - ${err.message}`);\r\n        runningServices--;\r\n        logStatus();\r\n    });\r\n});"],"file":"index.dev.js"}
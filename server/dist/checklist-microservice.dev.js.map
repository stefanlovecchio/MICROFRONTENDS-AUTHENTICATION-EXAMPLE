{"version":3,"sources":["checklist-microservice.js"],"names":["express","require","mongoose","ApolloServer","gql","bodyParser","config","app","use","json","connect","process","env","MONGODB_URI","useNewUrlParser","useUnifiedTopology","db","connection","on","console","error","bind","checklistSchema","Schema","userId","String","symptoms","submittedAt","type","Date","now","Checklist","model","typeDefs","resolvers","Query","getChecklists","_","find","Mutation","submitChecklist","checklist","save","server","start","then","applyMiddleware","listen","port","log","graphqlPath"],"mappings":";;;;;;;;;;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;eAC8BA,OAAO,CAAC,uBAAD,C;IAA7BE,Y,YAAAA,Y;IAAcC,G,YAAAA,G;;AACtB,IAAMC,UAAU,GAAGJ,OAAO,CAAC,aAAD,CAA1B;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBK,MAAlB;;AAEA,IAAMC,GAAG,GAAGP,OAAO,EAAnB;AACAO,GAAG,CAACC,GAAJ,CAAQH,UAAU,CAACI,IAAX,EAAR,E,CAEA;;AACAP,QAAQ,CAACQ,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,WAA7B,EAA0C;AACtCC,EAAAA,eAAe,EAAE,IADqB;AAEtCC,EAAAA,kBAAkB,EAAE;AAFkB,CAA1C;AAIA,IAAMC,EAAE,GAAGd,QAAQ,CAACe,UAApB;AACAD,EAAE,CAACE,EAAH,CAAM,OAAN,EAAeC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,2BAA5B,CAAf,E,CAEA;;AACA,IAAMG,eAAe,GAAG,IAAIpB,QAAQ,CAACqB,MAAb,CAAoB;AACxCC,EAAAA,MAAM,EAAEC,MADgC;AAExCC,EAAAA,QAAQ,EAAE,CAACD,MAAD,CAF8B;AAGxCE,EAAAA,WAAW,EAAE;AAAEC,IAAAA,IAAI,EAAEC,IAAR;AAAc,eAASA,IAAI,CAACC;AAA5B;AAH2B,CAApB,CAAxB;AAKA,IAAMC,SAAS,GAAG7B,QAAQ,CAAC8B,KAAT,CAAe,WAAf,EAA4BV,eAA5B,CAAlB,C,CAEA;;AACA,IAAMW,QAAQ,GAAG7B,GAAH,mBAAd,C,CAiBA;;AACA,IAAM8B,SAAS,GAAG;AACdC,EAAAA,KAAK,EAAE;AACHC,IAAAA,aAAa,EAAE,uBAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAWb,cAAAA,MAAX,QAAWA,MAAX;AAAA;AAAA,8CACEO,SAAS,CAACO,IAAV,CAAe;AAAEd,gBAAAA,MAAM,EAANA;AAAF,eAAf,CADF;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADZ,GADO;AAMde,EAAAA,QAAQ,EAAE;AACNC,IAAAA,eAAe,EAAE,yBAAMH,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAWb,cAAAA,MAAX,SAAWA,MAAX,EAAmBE,QAAnB,SAAmBA,QAAnB;AACPe,cAAAA,SADO,GACK,IAAIV,SAAJ,CAAc;AAAEP,gBAAAA,MAAM,EAANA,MAAF;AAAUE,gBAAAA,QAAQ,EAARA;AAAV,eAAd,CADL;AAAA;AAAA,8CAEAe,SAAS,CAACC,IAAV,EAFA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADX;AANI,CAAlB,C,CAcA;;AACA,IAAMC,MAAM,GAAG,IAAIxC,YAAJ,CAAiB;AAAE8B,EAAAA,QAAQ,EAARA,QAAF;AAAYC,EAAAA,SAAS,EAATA;AAAZ,CAAjB,CAAf;AACAS,MAAM,CAACC,KAAP,GAAeC,IAAf,CAAoB,YAAM;AACtBF,EAAAA,MAAM,CAACG,eAAP,CAAuB;AAAEvC,IAAAA,GAAG,EAAHA;AAAF,GAAvB;AACAA,EAAAA,GAAG,CAACwC,MAAJ,CAAW;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAAX,EAA2B;AAAA,WACvB7B,OAAO,CAAC8B,GAAR,2DAA+DN,MAAM,CAACO,WAAtE,EADuB;AAAA,GAA3B;AAGH,CALD","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst { ApolloServer, gql } = require('apollo-server-express');\r\nconst bodyParser = require('body-parser');\r\nrequire('dotenv').config();\r\n\r\nconst app = express();\r\napp.use(bodyParser.json());\r\n\r\n// MongoDB Connection\r\nmongoose.connect(process.env.MONGODB_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n});\r\nconst db = mongoose.connection;\r\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\r\n\r\n// Checklist Schema\r\nconst checklistSchema = new mongoose.Schema({\r\n    userId: String,\r\n    symptoms: [String],\r\n    submittedAt: { type: Date, default: Date.now },\r\n});\r\nconst Checklist = mongoose.model('Checklist', checklistSchema);\r\n\r\n// GraphQL Schema\r\nconst typeDefs = gql `\r\n  type Checklist {\r\n    id: ID\r\n    userId: String\r\n    symptoms: [String]\r\n    submittedAt: String\r\n  }\r\n\r\n  type Query {\r\n    getChecklists(userId: String!): [Checklist]\r\n  }\r\n\r\n  type Mutation {\r\n    submitChecklist(userId: String!, symptoms: [String]!): Checklist\r\n  }\r\n`;\r\n\r\n// GraphQL Resolvers\r\nconst resolvers = {\r\n    Query: {\r\n        getChecklists: async(_, { userId }) => {\r\n            return await Checklist.find({ userId });\r\n        },\r\n    },\r\n    Mutation: {\r\n        submitChecklist: async(_, { userId, symptoms }) => {\r\n            const checklist = new Checklist({ userId, symptoms });\r\n            return await checklist.save();\r\n        },\r\n    },\r\n};\r\n\r\n// Apollo Server\r\nconst server = new ApolloServer({ typeDefs, resolvers });\r\nserver.start().then(() => {\r\n    server.applyMiddleware({ app });\r\n    app.listen({ port: 4004 }, () =>\r\n        console.log(`Checklist service ready at http://localhost:4004${server.graphqlPath}`)\r\n    );\r\n});"],"file":"checklist-microservice.dev.js"}
{"version":3,"sources":["patientportalApp-microservice.js"],"names":["require","config","express","ApolloServer","gql","mongoose","connect","process","env","MONGODB_URI","then","console","log","err","error","emergencyAlertSchema","Schema","patientName","type","String","required","timestamp","Date","default","now","EmergencyAlert","model","typeDefs","_templateObject","description","emergencyAlerts","regeneratorRuntime","async","_context","prev","next","awrap","find","sort","abrupt","sent","t0","Error","stop","Mutation","resolvers","_","_ref","newAlert","_context2","save","app","server","introspection","start","applyMiddleware","PORT","listen","concat","graphqlPath"],"mappings":"kkBAAAA,QAAQ,UAAUC,SAClB,IAAMC,QAAUF,QAAQ,oBACMA,QAAQ,yBAA9BG,sBAAAA,aAAcC,aAAAA,IAChBC,SAAWL,QAAQ,YAGzBK,SAASC,QAAQC,QAAQC,IAAIC,aACxBC,KAAK,WAAA,OAAMC,QAAQC,IAAI,uBAD5B,MAEW,SAACC,GAAD,OAASF,QAAQG,MAAM,4BAA6BD,KAG/D,IAAME,qBAAuB,IAAIV,SAASW,OAAO,CAC7CC,YAAa,CAAEC,KAAMC,OAAQC,UAAU,GACvCF,KAAM,CAAEA,KAAMC,OAAQC,UAAU,GAbpCpB,YAAA,CAAkBC,KAAlBkB,QAeIE,UAAW,CAAEH,KAAMI,KAAMC,QAASD,KAAKE,OAGrCC,eAhBgCpB,SAAAqB,MAAA,iBAgBkBX,sBAGlDY,SAAWvB,IAAHwB,mBAPVC,UAAa,CAAEX,MAAMC,CAHwBW,gBAAA,WAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAIlCX,eAAAY,OAAAC,KAAA,CAAAjB,WAAA,KAJkC,KAAA,EAAA,OAAAY,EAAAM,OAAA,SAAAN,EAAAO,MAAA,KAAA,EAAA,MAAAP,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,MAAA,GAIlCtB,QAAAG,MAAA,mCAAAmB,EAAAQ,IAJf,IAAAC,MAAA,oCAAiD,KAAA,GAAA,IAAA,MAAA,OAAAT,EAAAU,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAwC7CC,SAAU,CAXRC,kBAAY,SAAAC,EAAAC,GAAA,IAAA9B,EAAAC,EAAAW,EAAAmB,EAAA,OAAAjB,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAAAlB,EAAA8B,EAAA9B,YAAAC,EAAA6B,EAAA7B,KAAAW,EAAAkB,EAAAlB,YAAAoB,EAAAf,KAAA,EAEOc,EAAA,IAAAvB,eAAA,CAAAR,YAAAA,EAAAC,KAAAA,EAAAW,YAAAA,IAFPoB,EAAAd,KAAA,EAAAJ,mBAAAK,MAEOY,EAAAE,QAFP,KAAA,EAAA,OAAAD,EAAAV,OAAA,SAEOS,GAFP,KAAA,EAAA,MAAAC,EAAAf,KAAA,EAAAe,EAAAR,GAAAQ,EAAA,MAAA,GAEOtC,QAAAG,MAAA,gCAAAmC,EAAAR,IAAA,IAAAC,MAAA,iCAFP,KAAA,GAAA,IAAA,MAAA,OAAAO,EAAAN,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,QAEOQ,IAAAjD,UAyBnBkD,OAAS,IAAIjD,aAAa,CAzBPwB,SAAAA,SAAAkB,UAAAA,UAAAQ,eAAA,IA+BzBD,OAAOE,QAAQ5C,KAAK,WA/BK0C,OAAAG,gBAAA,CAAAJ,IAAAA,MAAA,IAAAK,EAAAjD,QAAAC,IAAAgD,MAAA,KAAAL,IAAAM,OAAAD,EAAA,WAAA7C,QAAAC,IAAA,0DAAA8C,OAAAF,GAAAE,OAAAN,OAAAO","file":"patientportalApp-microservice.min.js","sourcesContent":["require('dotenv').config();\r\nconst express = require('express');\r\nconst { ApolloServer, gql } = require('apollo-server-express');\r\nconst mongoose = require('mongoose');\r\n\r\n// MongoDB connection\r\nmongoose.connect(process.env.MONGODB_URI)\r\n    .then(() => console.log('MongoDB connected'))\r\n    .catch((err) => console.error('MongoDB connection error:', err));\r\n\r\n// Define Mongoose schema and model\r\nconst emergencyAlertSchema = new mongoose.Schema({\r\n    patientName: { type: String, required: true },\r\n    type: { type: String, required: true },\r\n    description: { type: String },\r\n    timestamp: { type: Date, default: Date.now },\r\n});\r\n\r\nconst EmergencyAlert = mongoose.model('EmergencyAlert', emergencyAlertSchema);\r\n\r\n// GraphQL schema\r\nconst typeDefs = gql `\r\n  type EmergencyAlert {\r\n    id: ID!\r\n    patientName: String!\r\n    type: String!\r\n    description: String\r\n    timestamp: String!\r\n  }\r\n\r\n  type Query {\r\n    emergencyAlerts: [EmergencyAlert]\r\n  }\r\n\r\n  type Mutation {\r\n    addEmergencyAlert(patientName: String!, type: String!, description: String): EmergencyAlert\r\n  }\r\n`;\r\n\r\n// GraphQL resolvers\r\nconst resolvers = {\r\n    Query: {\r\n        emergencyAlerts: async() => {\r\n            try {\r\n                return await EmergencyAlert.find().sort({ timestamp: -1 });\r\n            } catch (err) {\r\n                console.error('Error fetching emergency alerts:', err);\r\n                throw new Error('Could not fetch emergency alerts');\r\n            }\r\n        },\r\n    },\r\n    Mutation: {\r\n        addEmergencyAlert: async(_, { patientName, type, description }) => {\r\n            try {\r\n                const newAlert = new EmergencyAlert({ patientName, type, description });\r\n                await newAlert.save();\r\n                return newAlert;\r\n            } catch (err) {\r\n                console.error('Error adding emergency alert:', err);\r\n                throw new Error('Could not add emergency alert');\r\n            }\r\n        },\r\n    },\r\n};\r\n\r\n// Initialize Apollo Server\r\nconst app = express();\r\nconst server = new ApolloServer({\r\n    typeDefs,\r\n    resolvers,\r\n    introspection: true, // Enable GraphiQL for testing\r\n});\r\n\r\nserver.start().then(() => {\r\n    server.applyMiddleware({ app });\r\n\r\n    // Start Express server\r\n    const PORT = process.env.PORT || 4004;\r\n    app.listen(PORT, () => {\r\n        console.log(`ðŸš€ Emergency Alert Service running at http://localhost:${PORT}${server.graphqlPath}`);\r\n    });\r\n});"]}
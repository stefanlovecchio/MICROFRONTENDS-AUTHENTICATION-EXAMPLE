{"version":3,"sources":["auth-microservice.js"],"names":["express","require","ApolloServer","gql","jwt","cookieParser","cors","mongoose","bcrypt","config","app","use","origin","credentials","connect","process","env","MONGODB_URI","then","console","log","err","error","userSchema","User","model","typeDefs","module","exports","resolvers","Query","currentUser","_","__","req","token","cookies","decoded","verify","JWT_SECRET","username","currentUserType","accountType","Mutation","login","password","res","findOne","user","Error","compare","match","sign","expiresIn","cookie","httpOnly","maxAge","register","firstName","lastName","email","existingUser","hash","hashedPassword","newUser","save","logout","clearCookie","server","context","start","applyMiddleware","listen","port","graphqlPath"],"mappings":"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","sourcesContent":["// server/auth-microservice.js\r\nconst express = require('express');\r\nconst { ApolloServer, gql } = require('apollo-server-express');\r\nconst jwt = require('jsonwebtoken');\r\nconst cookieParser = require('cookie-parser');\r\nconst cors = require('cors');\r\nconst mongoose = require('mongoose');\r\nconst bcrypt = require('bcrypt');\r\nrequire('dotenv').config();\r\n//\r\nconst app = express();\r\n//\r\n// Add cors middleware\r\napp.use(cors({\r\n    origin: ['http://localhost:3000', 'http://localhost:3001',\r\n        'http://localhost:3002', 'http://localhost:3003', 'http://localhost:3004', 'https://studio.apollographql.com'\r\n    ], // Adjust the origin according to your micro frontends' host\r\n    credentials: true, // Allow cookies to be sent\r\n}));\r\napp.use(cookieParser());\r\n//\r\n// MongoDB connection setup\r\nmongoose.connect(process.env.MONGODB_URI)\r\n    .then(() => console.log(\"MongoDB connected\"))\r\n    .catch(err => console.error(\"MongoDB connection error:\", err));\r\n//\r\n// User schema definition\r\nconst userSchema = require('./userSchema');\r\n//\r\nconst User = mongoose.model('User', userSchema);\r\n//\r\nconst typeDefs = gql `\r\n  type User {\r\n    username: String!\r\n    password: String!\r\n    firstName: String!\r\n    lastName: String!\r\n    email: String!\r\n    accountType: String!\r\n  }\r\n\r\n  type Query {\r\n    currentUser: User\r\n    currentUserType: User\r\n  }\r\n  type Mutation {\r\n    login(username: String!, password: String!): Boolean\r\n    register(username: String!, password: String!, firstName: String!, lastName: String!, email: String!, accountType: String): Boolean\r\n    logout: Boolean\r\n  }\r\n`;\r\n\r\nmodule.exports = userSchema;\r\n\r\nconst resolvers = {\r\n    Query: {\r\n        currentUser: (_, __, { req }) => {\r\n            // Assuming the JWT token is sent via an HTTP-only cookie named 'token'\r\n            const token = req.cookies['token'];\r\n            if (!token) {\r\n                return null; // No user is logged in\r\n            }\r\n\r\n            try {\r\n                // Verify and decode the JWT. Note: Make sure to handle errors appropriately in a real app\r\n                const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n                return { username: decoded.username };\r\n            } catch (error) {\r\n                // Token verification failed\r\n                return null;\r\n            }\r\n        },\r\n\r\n        currentUserType: (_, __, { req }) => {\r\n            // Assuming the JWT token is sent via an HTTP-only cookie named 'token'\r\n            const token = req.cookies['token'];\r\n            if (!token) {\r\n                return null; // No user is logged in\r\n            }\r\n\r\n            try {\r\n                // Verify and decode the JWT. Note: Make sure to handle errors appropriately in a real app\r\n                const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n                console.log(\"decoded jwt token: \" + decoded.accountType);\r\n                return { accountType: decoded.accountType };\r\n            } catch (error) {\r\n                // Token verification failed\r\n                return null;\r\n            }\r\n        },\r\n    },\r\n    Mutation: {\r\n        login: async(_, { username, password }, { res }) => {\r\n            // In a real app, validate username and password against a database\r\n            const user = await User.findOne({ username });\r\n            if (!user) {\r\n                throw new Error('User not found');\r\n            }\r\n            const match = await bcrypt.compare(password, user.password);\r\n            if (!match) {\r\n                throw new Error('Invalid password');\r\n            }\r\n            //\r\n            const token = jwt.sign({ username: user.username, accountType: user.accountType }, process.env.JWT_SECRET, { expiresIn: '1d' });\r\n            res.cookie('token', token, {\r\n                httpOnly: true,\r\n                //sameSite: 'None',\r\n                // secure: true, // Set to true if your site is served over HTTPS\r\n                maxAge: 24 * 60 * 60 * 1000, // 1 day\r\n            });\r\n            return true;\r\n        },\r\n        register: async(_, { username, password, firstName, lastName, email, accountType }) => {\r\n            const existingUser = await User.findOne({ username });\r\n            if (existingUser) {\r\n                throw new Error('Username is already taken');\r\n            }\r\n\r\n            const hashedPassword = await bcrypt.hash(password, 10);\r\n            const newUser = new User({ username, password: hashedPassword, firstName, lastName, email, accountType });\r\n            await newUser.save();\r\n            return true;\r\n        },\r\n        logout: (_, __, { res }) => {\r\n            res.clearCookie('token');\r\n            return true;\r\n        }\r\n    },\r\n};\r\n//\r\nconst server = new ApolloServer({\r\n    typeDefs,\r\n    resolvers,\r\n    context: ({ req, res }) => ({ req, res }),\r\n});\r\nserver.start().then(() => {\r\n    server.applyMiddleware({ app, cors: false });\r\n    //\r\n    app.listen({ port: 4001 }, () =>\r\n        console.log(`🚀 Auth Server ready at http://localhost:4001${server.graphqlPath}`)\r\n    );\r\n});"],"file":"auth-microservice.dev.js"}
{"version":3,"sources":["index.js"],"names":["require","fork","execSync","services","name","path","port","runningServices","console","concat","totalServices","killPortTasks","encoding","trim","split","map","line","columns","length","forEach","pid","log","error","clear","service","status","result","padEnd","mongoDB","graphQL","lines","pids","stdio","_objectSpread","process","env","PORT","logStatus","stdout","data","output","includes","child","stderr","on","toString","code","err","message"],"mappings":"qvBAAiBA,QAAQ,iBAAjBC,cAAAA,eACaD,QAAQ,iBAArBE,mBAAAA,SAEFC,SAAW,CACb,CAAEC,KAAM,eAAgBC,KAAM,yBAA0BC,KAAM,MAC9D,CAAEF,KAAM,oBAAqBC,KAAM,8BAA+BC,KAAM,MACxE,CAAEF,KAAM,4BAA6BC,KAAM,qCAAsCC,KAAM,MACvF,CAAEF,KAAM,yBAA0BC,KAAM,qCAAsCC,KAAM,MACpF,CAAEF,KAAM,sBARaC,KAQgB,+BAAgCC,KAAM,OAG3EC,gBAViBP,EAAbE,cAWcC,SAXdD,OAERM,QAAML,IAAN,YAAAM,OACIC,cADJ,wBAC4BL,IAAIM,cAAE,SAAAL,GAA0BA,IACxDJ,SAAA,2BAAAO,OAAAH,GAAA,CAAAM,SAAA,UAAAC,OAAAC,MAAA,MAAmCC,IAAA,SAAAC,GAAqC,IAAAC,EAAAD,EAAAH,OAAAC,MAAA,OACxE,OAAAG,EAAAA,EAAAC,OAAA,KAAuFC,QAAA,SAAAC,GACvFZ,QAAAa,IAAA,6BAAAZ,OAAAW,EAAA,aAAAX,OAAAH,IAAQJ,SAAA,iBAAAO,OAARW,EAAQ,UACRZ,QAAAa,IAAA,QAAAZ,OAAAH,EAAA,qBAAM,MAAEgB,GAA6Bd,QAAAa,IAAA,0BAAAZ,OAArCH,EAAqC,QAInCI,UAAa,WAEnBF,QAAAe,QAwBIf,QAAQa,IAAR,0BAAAZ,OAAsCF,gBAAtC,KAAAE,OAAyDC,cAAzD,OAtBEC,SAAAA,QAAgB,SAAAa,GACd,IAAAC,EAAAD,EAAAC,QAAA,GACMC,QAAML,IAANK,IAAAA,OAAiEF,EAAApB,KAAAuB,OAAA,IAAjED,YAAAA,OAAiEF,EAAAlB,KAAjEoB,gBAAAA,OAAiED,EAAAG,SAAA,IAAjEF,gBAAAA,OAAiED,EAAAI,SAAA,QAEvErB,QAAUa,IAAGS,qCAGZ3B,SAHDgB,QAAA,SAAAK,GAKAO,cAAaP,EAAAlB,MAETJ,EAAAA,OAAQ,CAAA0B,QAAA,IAAAC,QAAA,KAGZrB,IAAAA,EAAAP,KAAAuB,EAAoBlB,KAApB,GAAA,CACF0B,MAAOV,CAAP,UAAc,OAAA,OAAA,OACZd,IAAOyB,cAAA,GAAPC,QAAAC,IAAO,CAAPC,KAAAZ,EAAAlB,SA0BJC,kBAtBE8B,QAAAA,IAAAA,IAAAA,OAAYb,EAAZa,KAAAA,uBAAAA,OAAkBb,EAAAlB,KAAlB+B,QACF7B,YAEAL,EAASgB,QACCM,EAAMa,OAAGd,GAAO,OAAP,SAAAe,GACPlB,IAARmB,EACQhB,EAAAA,WAAaG,OAHzBnB,QAAAa,IAAA,uBAAAZ,OAAAe,EAAApB,KAAA,KAAAoC,GAHJA,EAAAC,SAAA,uBAgCgBjB,EAAQC,OAAOG,QAAU,KAjBrCY,EAAiBC,SAAA,+BAAAjB,EAAAC,OAAAI,QAAA,KAENQ,cAEJK,EAAAC,QAFPD,EAAAC,OAAAC,GAAA,OAAA,SAAAL,GAKAhC,QAAee,MAAff,IAAAA,OAAeiB,EAAApB,KAAfG,aAAAA,OAAegC,EAAAM,WAAAhC,WAIf6B,EAAIA,GAAMJ,OAAQ,SAAAQ,GACdJ,kBACIlB,EAAYC,OAAOG,QAAJ,IACfpB,EAAQa,OAARQ,QAAA,IAwBJrB,QAAQa,IAAR,IAAAZ,OAAgBe,EAAQpB,KAAxB,+BAAAK,OAA0DqC,IAtBtDT,cA0BRK,EAAME,GAAG,QAAS,SAACG,GAtBXvC,QAAUc,MAAV,IAAAb,OAAoBe,EAAApB,KAApB,+BAAAK,OAAkDsC,EAAAC,UAC9CxB,kBACHa","file":"index.min.js","sourcesContent":["const { fork } = require('child_process');\r\nconst { execSync } = require('child_process');\r\n\r\nconst services = [\r\n    { name: 'Auth Service', path: './auth-microservice.js', port: 4001 },\r\n    { name: 'Checklist Service', path: './checklist-microservice.js', port: 4002 },\r\n    { name: 'Motivational Tips Service', path: './motivationalTips-microservice.js', port: 4003 },\r\n    { name: 'Patient Portal Service', path: './patientPortalApp-microservice.js', port: 4004 },\r\n    { name: 'Vital Signs Service', path: './vitalSigns-microservice.js', port: 4005 },\r\n];\r\n\r\nlet runningServices = 0;\r\nconst totalServices = services.length;\r\n\r\nconsole.log(`Starting ${totalServices} microservices...\\n`);\r\n\r\nconst killPortTasks = (port) => {\r\n    try {\r\n        const result = execSync(`netstat -ano | findstr :${port}`, { encoding: 'utf-8' });\r\n        const lines = result.trim().split('\\n');\r\n        const pids = lines.map((line) => {\r\n            const columns = line.trim().split(/\\s+/);\r\n            return columns[columns.length - 1];\r\n        });\r\n\r\n        pids.forEach((pid) => {\r\n            console.log(`Killing process with PID: ${pid} on port ${port}`);\r\n            execSync(`taskkill /PID ${pid} /F`);\r\n        });\r\n\r\n        console.log(`Port ${port} has been freed.`);\r\n    } catch (error) {\r\n        console.log(`No tasks found on port ${port}.`);\r\n    }\r\n};\r\n\r\nconst logStatus = () => {\r\n    console.clear();\r\n    console.log(`Microservices Running: ${runningServices}/${totalServices}\\n`);\r\n    services.forEach((service) => {\r\n        const status = service.status || {};\r\n        console.log(\r\n            `[${service.name.padEnd(25)}] Port: ${service.port} | MongoDB: ${status.mongoDB || '❌'} | GraphQL: ${status.graphQL || '❌'}`\r\n        );\r\n    });\r\n    console.log('\\n----------------------------\\n');\r\n};\r\n\r\nservices.forEach((service) => {\r\n    killPortTasks(service.port);\r\n\r\n    service.status = { mongoDB: '❌', graphQL: '❌' };\r\n\r\n    const child = fork(service.path, [], {\r\n        stdio: ['inherit', 'pipe', 'pipe', 'ipc'],\r\n        env: {...process.env, PORT: service.port },\r\n    });\r\n\r\n    runningServices++;\r\n    console.log(`[${service.name}] Starting on port ${service.port}...`);\r\n    logStatus();\r\n\r\n    if (child.stdout) {\r\n        child.stdout.on('data', (data) => {\r\n            const output = data.toString().trim();\r\n            console.log(`[DEBUG] Output from ${service.name}:`, output);\r\n\r\n            if (output.includes('MongoDB connected')) {\r\n                service.status.mongoDB = '✅';\r\n            }\r\n\r\n            if (output.includes('GraphQL server is running')) {\r\n                service.status.graphQL = '✅';\r\n            }\r\n\r\n            logStatus();\r\n        });\r\n    }\r\n\r\n    if (child.stderr) {\r\n        child.stderr.on('data', (data) => {\r\n            console.error(`[${service.name} Error]: ${data.toString().trim()}`);\r\n        });\r\n    }\r\n\r\n    child.on('exit', (code) => {\r\n        runningServices--;\r\n        service.status.mongoDB = '❌';\r\n        service.status.graphQL = '❌';\r\n        console.log(`[${service.name}] Process exited with code ${code}`);\r\n        logStatus();\r\n    });\r\n\r\n    child.on('error', (err) => {\r\n        console.error(`[${service.name} Error]: Failed to start - ${err.message}`);\r\n        runningServices--;\r\n        logStatus();\r\n    });\r\n});"]}
{"version":3,"sources":["vitalSigns-microservice.js"],"names":["express","require","ApolloServer","gql","jwt","cors","cookieParser","bodyParser","userSchema","config","mongoose","Schema","model","connect","process","env","MONGODB_URI","useUnifiedTopology","connection","db","on","console","error","bind","app","origin","userId","type","Types","ObjectId","required","ref","temperature","Number","now","vitalSign","vitalSignSchema","typeDefs","_templateObject","use","json","getVitalSignsByUsername","username","vitalSigns","regeneratorRuntime","async","_context","prev","next","awrap","aggregate","from","foreignField","as","$match","user.username","$regex","$options","localField","_id","heartRate","bloodPressure","$addFields","sent","abrupt","$project","t0","id","Error","message","stop","createdAt","user","_context2","User","findOne","resolvers","Query","getVitalSigns","_","_ref","_context3","find","Mutation","addVitalSign","_ref2","newVitalSign","_context4","getUserIdByUsername","log","updateVitalSign","_ref3","updatedVitalSign","_context5","findByIdAndUpdate","new","server","context","_ref4","token","req","cookies","verify","e","start","then","applyMiddleware","listen","port","concat","graphqlPath"],"mappings":"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","file":"vitalSigns-microservice.min.js","sourcesContent":["// server/product-microservice.js\r\nconst express = require('express');\r\nconst { ApolloServer, gql } = require('apollo-server-express');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors');\r\nconst cookieParser = require('cookie-parser');\r\nconst bodyParser = require('body-parser');\r\nconst userSchema = require('./userSchema');\r\nrequire('dotenv').config();\r\n//\r\nconst mongoose = require('mongoose');\r\nconst { Schema, model } = mongoose;\r\n\r\n// MongoDB connection setup\r\nmongoose.connect(process.env.MONGODB_URI, {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n});\r\nconst db = mongoose.connection;\r\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\r\n//user model\r\nconst User = model('User', userSchema);\r\n\r\n// Initialize express and configure middleware\r\nconst app = express();\r\napp.use(cors({\r\n    origin: ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:3002', 'https://studio.apollographql.com'],\r\n    credentials: true,\r\n}));\r\napp.use(cookieParser());\r\n\r\n\r\n\r\n// Vital signs schema definition\r\nconst vitalSignSchema = new Schema({\r\n    userId: { type: mongoose.Schema.Types.ObjectId, required: true, ref: 'User' },\r\n    heartRate: Number,\r\n    bloodPressure: String,\r\n    temperature: Number,\r\n    createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\nconst vitalSign = model('VitalSign', vitalSignSchema);\r\n\r\n// GraphQL schema\r\nconst typeDefs = gql `\r\n    type VitalSign {\r\n        id: ID\r\n        userId: ID\r\n        heartRate: Int\r\n        bloodPressure: Int\r\n        temperature: Float\r\n        createdAt: String\r\n    }\r\n\r\n    type Query {\r\n        getVitalSigns(userId:ID, username: String): [VitalSign]\r\n    }\r\n\r\n    type Mutation {\r\n        addVitalSign(username: String!, heartRate: Int!, bloodPressure: Int!, temperature: Float!): VitalSign\r\n        updateVitalSign(id: ID!, heartRate: Int, bloodPressure: Int, temperature: Float): VitalSign\r\n    }\r\n`;\r\n\r\n// Middleware\r\napp.use(bodyParser.json());\r\n\r\n\r\n//Get vital signs by username function\r\nconst getVitalSignsByUsername = async(username) => {\r\n    try {\r\n        const vitalSigns = await vitalSign.aggregate([{\r\n                $lookup: {\r\n                    from: 'users',\r\n                    localField: 'userId',\r\n                    foreignField: '_id',\r\n                    as: 'user'\r\n                }\r\n            },\r\n            {\r\n                $match: {\r\n                    'user.username': { $regex: username, $options: 'i' }\r\n                }\r\n            },\r\n            {\r\n                $addFields: {\r\n                    id: '$_id'\r\n                }\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: 0,\r\n                    id: 1,\r\n                    userId: 1,\r\n                    heartRate: 1,\r\n                    bloodPressure: 1,\r\n                    temperature: 1,\r\n                    createdAt: 1\r\n                }\r\n            }\r\n        ]);\r\n        return vitalSigns;\r\n    } catch (error) {\r\n        throw new Error(\"Error fetching vital signs for this username: \" + error.message);\r\n    }\r\n}\r\n\r\n//Get userId by username\r\nconst getUserIdByUsername = async(username) => {\r\n    const user = await User.findOne({ username });\r\n    return user._id;\r\n};\r\n\r\n// GraphQL resolvers\r\nconst resolvers = {\r\n    Query: {\r\n        getVitalSigns: async(_, { userId, username }) => {\r\n            if (userId) {\r\n                try {\r\n                    const vitalSigns = await vitalSign.find({ userId: userId });\r\n                    return vitalSigns;\r\n                } catch (error) {\r\n                    throw new Error(\"Error fetching vital signs: \" + error.message);\r\n                }\r\n            } else if (username) {\r\n                return getVitalSignsByUsername(username);\r\n            } else {\r\n                throw new Error(\"Invalid username or userId\");\r\n            }\r\n        }\r\n    },\r\n    Mutation: {\r\n        addVitalSign: async(_, { username, heartRate, bloodPressure, temperature }) => {\r\n            const userId = await getUserIdByUsername(username);\r\n            console.log(userId);\r\n            try {\r\n                const newVitalSign = new vitalSign({ userId, heartRate, bloodPressure, temperature });\r\n                return await newVitalSign.save();\r\n            } catch (error) {\r\n                throw new Error(\"Error adding vital sign: \" + error.message);\r\n            }\r\n        },\r\n\r\n        updateVitalSign: async(_, { id, heartRate, bloodPressure, temperature }) => {\r\n            try {\r\n\r\n                const updatedVitalSign = await vitalSign.findByIdAndUpdate(\r\n                    id, { heartRate, bloodPressure, temperature }, { new: true }\r\n                );\r\n                if (!updatedVitalSign) throw new Error(\"Vital sign not found\");\r\n                return updatedVitalSign;\r\n            } catch (error) {\r\n                throw new Error(\"Error updating vital sign: \" + error.message);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n// Create and start Apollo Server\r\nconst server = new ApolloServer({\r\n    typeDefs,\r\n    resolvers,\r\n    context: ({ req }) => {\r\n        const token = req.cookies['token'];\r\n        if (token) {\r\n            try {\r\n                const user = jwt.verify(token, 'your_secret_key'); // Replace 'your_secret_key' with your actual secret key\r\n                return { user };\r\n            } catch (e) {\r\n                throw new Error('Your session expired. Sign in again.');\r\n            }\r\n        }\r\n    },\r\n});\r\n//\r\nserver.start().then(() => {\r\n    server.applyMiddleware({ app, cors: false });\r\n    app.listen({ port: 4002 }, () => console.log(`🚀 Server ready at http://localhost:4002${server.graphqlPath}`));\r\n});"]}
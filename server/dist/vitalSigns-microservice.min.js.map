{"version":3,"sources":["vitalSigns-microservice.js"],"names":["express","require","ApolloServer","gql","jwt","cors","cookieParser","bodyParser","userSchema","config","mongoose","Schema","model","connect","process","env","MONGODB_URI","log","err","console","error","connection","db","on","bind","User","app","use","credentials","Types","ObjectId","required","ref","heartRate","Number","temperature","createdAt","type","default","Date","now","vitalSign","vitalSignSchema","typeDefs","_templateObject","json","getVitalSignsByUsername","username","vitalSigns","regeneratorRuntime","async","_context","prev","next","awrap","aggregate","from","foreignField","as","$match","user.username","$regex","$options","localField","_id","bloodPressure","$addFields","sent","abrupt","$project","t0","id","Error","message","stop","user","_context2","findOne","resolvers","Query","getVitalSigns","_","_ref","userId","_context3","find","Mutation","addVitalSign","_ref2","newVitalSign","_context4","getUserIdByUsername","updateVitalSign","_ref3","updatedVitalSign","_context5","findByIdAndUpdate","new","server","context","_ref4","token","req","cookies","verify","JWT_SECRET","e","start","then","applyMiddleware","listen","port","concat","graphqlPath"],"mappings":"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","file":"vitalSigns-microservice.min.js","sourcesContent":["// server/product-microservice.js\r\nconst express = require('express');\r\nconst { ApolloServer, gql } = require('apollo-server-express');\r\nconst jwt = require('jsonwebtoken');\r\nconst cors = require('cors');\r\nconst cookieParser = require('cookie-parser');\r\nconst bodyParser = require('body-parser');\r\nconst userSchema = require('./userSchema');\r\nrequire('dotenv').config();\r\n//\r\nconst mongoose = require('mongoose');\r\nconst { Schema, model } = mongoose;\r\n\r\n// MongoDB connection setup\r\nmongoose.connect(process.env.MONGODB_URI)\r\n    .then(() => console.log(\"MongoDB connected\"))\r\n    .catch(err => console.error(\"MongoDB connection error:\", err));\r\n\r\nconst db = mongoose.connection;\r\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\r\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\r\n//user model\r\nconst User = model('User', userSchema);\r\n\r\n// Initialize express and configure middleware\r\nconst app = express();\r\napp.use(cors({\r\n    origin: ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:3002', 'http://localhost:3003', 'https://studio.apollographql.com'],\r\n    credentials: true,\r\n\r\n}));\r\napp.use(cookieParser());\r\n\r\n\r\n\r\n// Vital signs schema definition\r\nconst vitalSignSchema = new Schema({\r\n    userId: { type: mongoose.Schema.Types.ObjectId, required: true, ref: 'User' },\r\n    heartRate: Number,\r\n    bloodPressure: String,\r\n    temperature: Number,\r\n    createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\nconst vitalSign = model('VitalSign', vitalSignSchema);\r\n\r\n// GraphQL schema\r\nconst typeDefs = gql `\r\n    type VitalSign {\r\n        id: ID\r\n        userId: ID\r\n        heartRate: Int\r\n        bloodPressure: Int\r\n        temperature: Float\r\n        createdAt: String\r\n    }\r\n\r\n    type Query {\r\n        getVitalSigns(userId:ID, username: String): [VitalSign]\r\n    }\r\n\r\n    type Mutation {\r\n        addVitalSign(username: String!, heartRate: Int!, bloodPressure: Int!, temperature: Float!): VitalSign\r\n        updateVitalSign(id: ID!, heartRate: Int, bloodPressure: Int, temperature: Float): VitalSign\r\n    }\r\n`;\r\n\r\n// Middleware\r\napp.use(bodyParser.json());\r\n\r\n\r\n//Get vital signs by username function\r\nconst getVitalSignsByUsername = async(username) => {\r\n    try {\r\n        const vitalSigns = await vitalSign.aggregate([{\r\n                $lookup: {\r\n                    from: 'users',\r\n                    localField: 'userId',\r\n                    foreignField: '_id',\r\n                    as: 'user'\r\n                }\r\n            },\r\n            {\r\n                $match: {\r\n                    'user.username': { $regex: username, $options: 'i' }\r\n                }\r\n            },\r\n            {\r\n                $addFields: {\r\n                    id: '$_id'\r\n                }\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: 0,\r\n                    id: 1,\r\n                    userId: 1,\r\n                    heartRate: 1,\r\n                    bloodPressure: 1,\r\n                    temperature: 1,\r\n                    createdAt: 1\r\n                }\r\n            }\r\n        ]);\r\n        return vitalSigns;\r\n    } catch (error) {\r\n        throw new Error(\"Error fetching vital signs for this username: \" + error.message);\r\n    }\r\n}\r\n\r\n//Get userId by username\r\nconst getUserIdByUsername = async(username) => {\r\n    const user = await User.findOne({ username });\r\n    return user._id;\r\n};\r\n\r\n// GraphQL resolvers\r\nconst resolvers = {\r\n    Query: {\r\n        getVitalSigns: async(_, { userId, username }) => {\r\n            if (userId) {\r\n                try {\r\n                    const vitalSigns = await vitalSign.find({ userId: userId });\r\n                    return vitalSigns;\r\n                } catch (error) {\r\n                    throw new Error(\"Error fetching vital signs: \" + error.message);\r\n                }\r\n            } else if (username) {\r\n                return getVitalSignsByUsername(username);\r\n            } else {\r\n                throw new Error(\"Invalid username or userId\");\r\n            }\r\n        }\r\n    },\r\n    Mutation: {\r\n        addVitalSign: async(_, { username, heartRate, bloodPressure, temperature }) => {\r\n            const userId = await getUserIdByUsername(username);\r\n            console.log(userId);\r\n            try {\r\n                const newVitalSign = new vitalSign({ userId, heartRate, bloodPressure, temperature });\r\n                return await newVitalSign.save();\r\n            } catch (error) {\r\n                throw new Error(\"Error adding vital sign: \" + error.message);\r\n            }\r\n        },\r\n\r\n        updateVitalSign: async(_, { id, heartRate, bloodPressure, temperature }) => {\r\n            try {\r\n\r\n                const updatedVitalSign = await vitalSign.findByIdAndUpdate(\r\n                    id, { heartRate, bloodPressure, temperature }, { new: true }\r\n                );\r\n                if (!updatedVitalSign) throw new Error(\"Vital sign not found\");\r\n                return updatedVitalSign;\r\n            } catch (error) {\r\n                throw new Error(\"Error updating vital sign: \" + error.message);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n\r\n\r\n// Create and start Apollo Server\r\nconst server = new ApolloServer({\r\n    typeDefs,\r\n    resolvers,\r\n    context: ({ req }) => {\r\n        const token = req.cookies['token'];\r\n        console.log(\"token in vital signs:\", token);\r\n        if (token) {\r\n            try {\r\n                const user = jwt.verify(token, process.env.JWT_SECRET); // Replace 'your_secret_key' with your actual secret key\r\n                return { user };\r\n            } catch (e) {\r\n                throw new Error('Your session expired. Sign in again.');\r\n            }\r\n        }\r\n    },\r\n});\r\n//\r\nserver.start().then(() => {\r\n    server.applyMiddleware({ app, cors: false });\r\n    app.listen({ port: 4002 }, () =>\r\n        console.log(`🚀 Vital Signs Server ready at http://localhost:4005${server.graphqlPath}`));\r\n});"]}